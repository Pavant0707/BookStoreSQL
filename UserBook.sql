CREATE DATABASE BOOKSTORE
USE BOOKSTORE

CREATE TABLE USERS(
USERID INT PRIMARY KEY IDENTITY(1,1),
FULLNAME VARCHAR(100) NOT NULL,
EMAILID VARCHAR(100) NOT NULL,
PASSWORD VARCHAR(20)NOT NULL,
PHONENUMBER VARCHAR(20)NOT NULL);

CREATE OR ALTER PROCEDURE REGISTER_USER
@FULLNAME VARCHAR(100),
@EMAILID VARCHAR(100),
@PASSWORD VARCHAR(20),
@PHONENUMBER VARCHAR(20)
AS 
BEGIN
IF @FULLNAME IS NULL OR
@EMAILID IS NULL OR
@PASSWORD IS NULL OR
@PHONENUMBER IS NULL

BEGIN
PRINT 'PROVIDE ALL PARMETERS'
RETURN 
END

INSERT INTO USERS(FULLNAME,EMAILID,PASSWORD,PHONENUMBER)
VALUES(@FULLNAME,@EMAILID,@PASSWORD,@PHONENUMBER);


IF @@ROWCOUNT=1
BEGIN
PRINT 'ROW REGISTERED';
END

ELSE

BEGIN
PRINT'FAILED';
END
END


select * from users;

CREATE OR ALTER PROCEDURE GET_ALL_USER
AS
BEGIN
BEGIN TRY
IF EXISTS (SELECT 1 FROM USERS)
BEGIN
SELECT * FROM USERS
 END
        ELSE
        BEGIN
            PRINT 'NO USER FOUND'
        END
    END TRY
    BEGIN CATCH
        -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END

exec REGISTER_USER 'Pavan','pavan@gmail.com','pavan@123','1111111111'

CREATE OR ALTER PROCEDURE LOGIN_USERS
@EMAILID VARCHAR(100),
@PASSWORD VARCHAR(100)
AS
BEGIN
BEGIN TRY
IF EXISTS(SELECT * FROM USERS WHERE EMAILID=@EMAILId AND PASSWORD=@PASSWORD)
BEGIN
SELECT * FROM USERS WHERE EMAILID=@EMAILID AND PASSWORD=@PASSWORD;
END
ELSE
 BEGIN 
 PRINT 'LOGIN FAILED'
 END
 END TRY
  BEGIN CATCH
    -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END

CREATE OR ALTER PROCEDURE UPDATEUSERS
@USERID INT,
@FULLNAME VARCHAR(100),
@EMAILID VARCHAR(100),
@PHONENUMBER VARCHAR(20)
AS
BEGIN
  BEGIN TRY
UPDATE USERS SET @FULLNAME=FULLNAME, 
                      @EMAILID=EMAILID,
					  @PHONENUMBER=PHONENUMBER
WHERE @USERID=USERID;


PRINT ' Information Updated Successfully';

END TRY

BEGIN CATCH


IF @@TRANCOUNT>0
 ROLLBACK TRANSACTION;

 DECLARE @ErrorMessage NVARCHAR(4000);
 DECLARE @ErrorSeverity INT;
 DECLARE @ErrorState INT;

 SELECT 
 @ErrorMessage=ERROR_MESSAGE(),
 @ErrorSeverity=ERROR_SEVERITY(),
 @ErrorState=ERROR_STATE();
 PRINT 'Error Occured: '+@ErrorMessage;
 
 END CATCH;
END;

CREATE OR ALTER PROCEDURE DELETEUSER(
@USERID INT)
AS
BEGIN
  BEGIN TRY
DELETE FROM USERS WHERE USERID=@USERID


PRINT 'USER  RECORD DELETED SUCCESSFULLY';
END TRY

BEGIN CATCH

 DECLARE @ErrorMessage NVARCHAR(4000);
 DECLARE @ErrorSeverity INT;
 DECLARE @ErrorState INT;

 SELECT 
 @ErrorMessage=ERROR_MESSAGE(),
 @ErrorSeverity=ERROR_SEVERITY(),
 @ErrorState=ERROR_STATE();
 PRINT 'Error Occured: '+@ErrorMessage;
 
 END CATCH;
 END



CREATE OR ALTER PROCEDURE FORGOT_PASSWORD(
@EMAILID VARCHAR(100))
AS
BEGIN
SET NOCOUNT ON;
  BEGIN TRY
  IF EXISTS (SELECT 1 FROM USERS WHERE EMAILID=@EMAILID)
  BEGIN
SELECT * FROM USERS WHERE EMAILID=@EMAILID
END
ELSE
PRINT 'RECORD NOT FOUND';
END TRY

BEGIN CATCH

 DECLARE @ErrorMessage NVARCHAR(4000);
 DECLARE @ErrorSeverity INT;
 DECLARE @ErrorState INT;

 SELECT 
 @ErrorMessage=ERROR_MESSAGE(),
 @ErrorSeverity=ERROR_SEVERITY(),
 @ErrorState=ERROR_STATE();
 PRINT 'Error Occured: '+@ErrorMessage;
 
 END CATCH;
 END


 CREATE OR ALTER PROCEDURE RESETPASSWORD
    @EMAILID VARCHAR(50),
    @NEWPASSWORD VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    -- Update the password hash for the given email
    UPDATE Users
    SET PASSWORD = @NEWPASSWORD
    WHERE EMAILID = @EMAILID;

    -- Check if the update was successful
    IF @@ROWCOUNT = 1
    BEGIN
	  PRINT 'PASSWORD RESET SUCCESSFUL';
    END
    ELSE
    BEGIN
        PRINT 'RESET FAILED: Email not found';
    END
END;